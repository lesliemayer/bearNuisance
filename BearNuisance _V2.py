# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# BearNuisance.py
# Created on: 2016-04-24 17:27:32.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
#
# ---------------------------------------------------------------------------
#=========================================================================================================================
#def IntersectTierParcels(bearFC, housesFC):
def IntersectTierParcels():

    # Import arcpy module
    import arcpy
    import numpy

    # Local variables:
    #BearKD_reclass_poly = "BearKD_reclass_poly"



    tierList = [1,2,3,4]
    parcelCounts = []
    canCost = 371.
    #tierCosts = [0., 0., 0., 0.]

    # 1. Select out bear density tier (1,2,3,4)
    #    Make Feature Layer, Select Layer by Attribute
    # 2. Select parcels layer by Location on countyParcelsMerge_Select that intersect Selected Attribute Layer (1,2,3,4)
    #    Input is Layer, selected feature is not
    # 3. Save Intersected Parcel layer to the gdb
    # 4. Count rows in intersected parcels
    # 5. Multiply rows by Cost/can


    housesFC = "countyParcelsMerge_Select"
    #bearFC = "BearKD_reclass_poly"

    #BearKD_reclass = "BearNuisKD_reclass
    bearFC =  "BearNuisKD_reclass_poly"


    field = "gridcode"  # field to do bear tier selection on

    # field to do selection on
    delimfield = arcpy.AddFieldDelimiters(bearFC, field)
    print "delimfield = " + delimfield
    # print arcpy.GetMessages()

    # Loop through the 4 tiers
    for nn in tierList : # -----------------------------------------
        bearLayer = "BearTier" + str(nn)
        print "bearLayer = " + bearLayer

        housesLayer = "ParcelsTier" + str(nn)
        print "housesLayer = " + housesLayer

        try :

            arcpy.MakeFeatureLayer_management(bearFC, bearLayer)

            # # field to do selection on
            # delimfield = arcpy.AddFieldDelimiters(bearFC, field)
            # print "delimfield = " + delimfield
            # # print arcpy.GetMessages()

            # Select bear density tier
            arcpy.SelectLayerByAttribute_management(bearLayer, "NEW_SELECTION", delimfield + " >= " + str(nn))
            # print
            # print arcpy.GetMessages()

            # Write the selected features to a new featureclass  (NOT SURE THIS IS NEEDED, BUT GOOD FOR
            # MAKING SURE ITS WORKING PROPERLY
            arcpy.CopyFeatures_management(bearLayer, arcpy.env.workspace + "/" + bearLayer)
            # print
            # print arcpy.GetMessages()

            # Need to make parcel data into a layer for selection
            arcpy.MakeFeatureLayer_management(housesFC, housesLayer)

            # Select parcels that intersect with bear density tier
            # SelectLayerByLocation_management (in_layer, {overlap_type}, {select_features}, {search_distance},
            # {selection_type}, {invert_spatial_relationship})
            arcpy.SelectLayerByLocation_management(housesLayer, "INTERSECT", bearLayer, "",
                                               "NEW_SELECTION", "NOT_INVERT")
            # print
            # print arcpy.GetMessages()

            # Count number of parcels in each Tier
            result = arcpy.GetCount_management(housesLayer)
            print "count = " + str(int(result.getOutput(0)))
            #print "nn = " + str(nn)
            parcelCounts.append(int(result.getOutput(0)))
            #print "Number of parcels in tier {0} = {1}".format(nn,count)

            # Save selected parcels to database
            arcpy.CopyFeatures_management(housesLayer, arcpy.env.workspace + "/" + housesLayer)
            # print
            # print arcpy.GetMessages()

            # catch the arcpy exceptions
        except arcpy.ExecuteError:
            print arcpy.GetMessages(2)
            sys.exit(1)

        except Exception, err:
            sys.stderr.write('IntersectTierParcels : ERROR: %s' % str(err))
            sys.exit(1)

    # end of for loop --------------------------------------------------------------------------------------------
    print
    print "======================================================"

    tierCosts = numpy.asarray(parcelCounts) * canCost
    num = 0
    for xx in tierCosts :
         print "Total costs for tier {0} = {1}".format(tierList[num], xx)
         num = num + 1


# ==================================================================================================================
#====================================================================================================================
# Make Bear Nuisance Density : 4 tiers
def MakeDensityTiers() :

    # Import system module
    import sys
    # Import arcpy module
    import arcpy

    # Black bear area of interest
    Bear_AOI = "Bear_AOI"

    # Black bear nuisance reports points
    Black_Bear_Nuisance_Reports = "Black_Bear_Nuisance_Reports"

    # bear nuisance data clipped to the area of interest
    Bear_Nuisance_clip = "Bear_Nuisance_clip"

    # Project the bear nuisance data to Albers Conical Equal Area [Florida Geographic Data Data Library]
    Bear_Nuisance_clip_Proj = Bear_Nuisance_clip + "_project"

    BearNuisClip_KD_sr3000m = "BearNuisClip_KD_sr3000m"

    BearKD_reclass = "BearNuisKD_reclass"

    BearKD_reclass_poly = BearKD_reclass + "_poly"

    try :

        # ======================================================================
        # Process: Clip
        arcpy.Clip_analysis(Black_Bear_Nuisance_Reports, Bear_AOI, Bear_Nuisance_clip, "")

        # Process: Project
        arcpy.Project_management(Bear_Nuisance_clip, Bear_Nuisance_clip_Proj, "PROJCS['Albers Conical Equal Area [Florida Geographic Data Data Library]',"
                                                                              "GEOGCS['GCS_North_American_1983_HARN',DATUM['D_North_American_1983_HARN',"
                                                                              "SPHEROID['GRS_1980',6378137.0,298.257222101]],PRIMEM['Greenwich',0.0],"
                                                                              "UNIT['Degree',0.0174532925199433]],PROJECTION['Albers'],"
                                                                              "PARAMETER['False_Easting',400000.0],PARAMETER['False_Northing',0.0],"
                                                                              "PARAMETER['Central_Meridian',-84.0],PARAMETER['Standard_Parallel_1',24.0],"
                                                                              "PARAMETER['Standard_Parallel_2',31.5],PARAMETER['Central_Parallel',24.0],UNIT['Meter',1.0]]",
                                                                              "NAD_1983_HARN_To_WGS_1984_2", "GEOGCS['GCS_WGS_1984',DATUM['D_WGS_1984',"
                                                                              "SPHEROID['WGS_1984',6378137.0,298.257223563]],PRIMEM['Greenwich',0.0],"
                                                                              "UNIT['Degree',0.0174532925199433]]", "NO_PRESERVE_SHAPE", "")

        # Check out the Spatial extension
        arcpy.CheckOutExtension('Spatial')

        # Process: Kernel Density
        # KernelDensity (in_features, population_field, {cell_size}, {search_radius}, {area_unit_scale_factor}, {out_cell_values}, {method})
        #arcpy.gp.KernelDensity_sa(Bear_Nuisance_clip_Proj, "NONE", BearNuisClip_KD_sr3000m, "2339.9094076894", "3000", "SQUARE_KILOMETERS", "DENSITIES", "PLANAR")
        arcpy.gp.KernelDensity_sa(Bear_Nuisance_clip_Proj, "NONE", BearNuisClip_KD_sr3000m, "500", "3000",
                                  "SQUARE_KILOMETERS", "DENSITIES", "PLANAR")

        # Process: Reclassify
        arcpy.gp.Reclassify_sa(BearNuisClip_KD_sr3000m, "Value", "0 10 NODATA;10 20 1;20 30 2;30 40 3;40 75.998420715332031 4", BearKD_reclass, "DATA")

        arcpy.CheckInExtension('Spatial')

        # Process: Raster to Polygon
        arcpy.RasterToPolygon_conversion(BearKD_reclass, BearKD_reclass_poly, "NO_SIMPLIFY", "Value")

        # ===========================================================================================================================

    # catch the arcpy exceptions
    except arcpy.ExecuteError:
        print arcpy.GetMessages(2)
        sys.exit(1)

    except Exception, err:
        sys.stderr.write('MakeDensityTiers : ERROR: %s' % str(err))
        sys.exit(1)