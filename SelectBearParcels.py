# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# finalProject.py
# Created on: 2016-04-24 17:27:32.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# Clip bear nuisances to area,  find the mean circle
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy
import numpy

# Set Geoprocessing environments
#arcpy.env.workspace = "C:\\Users\\mdeeds\\Documents\\Mayer\\FRCC\\GIS210_Intermediate\\FinalProject\\BearNuisance.gdb"

# enable overwriting
#arcpy.env.overwriteOutput = True

# Local variables:
countyParcelsMerge_Houses = "countyParcelsMerge_Select"
BearKD_reclass_poly = "BearKD_reclass_poly"


#======================================================================

# Process: Clip
#arcpy.Clip_analysis(Black_Bear_Nuisance_Reports, Bear_AOI, Bear_Nuisance_2014_clip, "")

# Process: Project
#arcpy.Project_management(Bear_Nuisance_2014_clip, Bear_Nuisance_2014_clip_Proj, "PROJCS['Albers Conical Equal Area [Florida Geographic Data

# Process: Kernel Density
#arcpy.gp.KernelDensity_sa(Bear_Nuisance_2014_clip_Proj, "NONE", BearNuis2014Clip_KD_sr3000m, "2339.9094076894", "3000", "SQUARE_KILOMETERS", "DENSITIES", "PLANAR")

# Process: Reclassify
#arcpy.gp.Reclassify_sa(BearNuis2014Clip_KD_sr3000m, "Value", "0 10 NODATA;10 20 1;20 30 2;30 40 3;40 75.998420715332031 4", BearKD_reclass, "DATA")

# Process: Raster to Polygon
#arcpy.RasterToPolygon_conversion(BearKD_reclass, BearKD_reclass_poly, "NO_SIMPLIFY", "Value")

#===========================================================================================================================



#                                                field
#delimitedfield = arcpy.AddFieldDelimiters(infc, "COUNTY")
#arcpy.Select_analysis(infc, outfc, delimitedfield + " ='Anchorage Borough'")
# Loop through the 4 tiers
tierList = [1,2,3,4]
parcelCounts = []
canCost = 371.
#tierCosts = [0., 0., 0., 0.]

# 1. Select out bear density tier (1,2,3,4)
#    Make Feature Layer, Select Layer by Attribute
# 2. Select parcels layer by Location on countyParcelsMerge_Select that intersect Selected Attribute Layer (1,2,3,4)
#    Input is Layer, selected feature is not
# 3. Save Intersected Parcel layer to the gdb
# 4. Count rows in intersected parcels
# 5. Multiply rows by Cost/can


housesFC = "countyParcelsMerge_Select"
bearFC = "BearKD_reclass_poly"
field = "gridcode"  # field to do bear tier selection on

# field to do selection on
delimfield = arcpy.AddFieldDelimiters(bearFC, field)
print "delimfield = " + delimfield
# print arcpy.GetMessages()

for nn in tierList : # -----------------------------------------
    bearLayer = "BearTier" + str(nn)
    print "bearLayer = " + bearLayer

    housesLayer = "ParcelsTeir" + str(nn)
    print "housesLayer = " + housesLayer

    try :

        arcpy.MakeFeatureLayer_management(bearFC, bearLayer)

        # # field to do selection on
        # delimfield = arcpy.AddFieldDelimiters(bearFC, field)
        # print "delimfield = " + delimfield
        # # print arcpy.GetMessages()

        # Select bear density tier
        arcpy.SelectLayerByAttribute_management(bearLayer, "NEW_SELECTION", delimfield + " >= " + str(nn))
        # print
        # print arcpy.GetMessages()

        # Write the selected features to a new featureclass  (NOT SURE THIS IS NEEDED, BUT GOOD FOR
        # MAKING SURE ITS WORKING PROPERLY
        arcpy.CopyFeatures_management(bearLayer, arcpy.env.workspace + "/" + bearLayer)
        # print
        # print arcpy.GetMessages()

        # Need to make parcel data into a layer for selection
        arcpy.MakeFeatureLayer_management(housesFC, housesLayer)

        # Select parcels that intersect with bear density tier
        # SelectLayerByLocation_management (in_layer, {overlap_type}, {select_features}, {search_distance},
        # {selection_type}, {invert_spatial_relationship})
        arcpy.SelectLayerByLocation_management(housesLayer, "INTERSECT", bearLayer, "",
                                           "NEW_SELECTION", "NOT_INVERT")
        # print
        # print arcpy.GetMessages()

        # Count number of parcels in each Tier
        result = arcpy.GetCount_management(housesLayer)
        print "count = " + str(int(result.getOutput(0)))
        #print "nn = " + str(nn)
        parcelCounts.append(int(result.getOutput(0)))
        #print "Number of parcels in tier {0} = {1}".format(nn,count)

        # print
        # print arcpy.GetMessages()

        # Save selected parcels to database
        arcpy.CopyFeatures_management(housesLayer, arcpy.env.workspace + "/" + housesLayer)
        # print
        # print arcpy.GetMessages()

    except :
        print
        print "***********************************************************************************"
        print "Error making feature layer and selecting from " + bearLayer + " and " + housesLayer
        print "***********************************************************************************"
        print
        print arcpy.GetMessages()
        print
        sys.exit(1)

# end of for loop --------------------------------------------------------------------------------------------
print
print "======================================================"

tierCosts = numpy.asarray(parcelCounts) * canCost
num = 0
for xx in tierCosts :
     print "Total costs for tier {0} = {1}".format(tierList[num], xx)
